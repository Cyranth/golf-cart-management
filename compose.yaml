services:
  db:
    image: postgres:${POSTGRES_IMAGE}
    restart: unless-stopped
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_PORT: ${POSTGRES_PORT}
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT}
    networks:
      - app-network

  backend:
    restart: on-failure
    build:
      context: ./backend
      dockerfile: .docker/Dockerfile
      args:
        - BASE_IMAGE_TAG=${BASE_IMAGE_TAG}
    environment:
      - API_PORT=${API_PORT}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - DEBUG=${DEBUG}
    ports:
      - ${API_PORT}:${API_PORT}
    depends_on:
      - db
    volumes:
      - ./backend:/app
      - /app/node_modules
    networks:
      - app-network

  frontend:
    build:
      context: ./frontend
      dockerfile: .docker/Dockerfile
      args:
        - BASE_IMAGE_TAG=${BASE_IMAGE_TAG}
    environment:
      - FRONTEND_PORT=${FRONTEND_PORT}
    ports:
      - ${FRONTEND_PORT}:${FRONTEND_PORT}
    depends_on:
      - backend
    volumes:
      - ./frontend:/app
      - /app/node_modules
    networks:
      - app-network

volumes:
  pgdata:

networks:
  app-network:
    driver: bridge
